// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CompositeAlarmSpec defines the desired state of CompositeAlarm.
//
// The details about a composite alarm.
type CompositeAlarmSpec struct {

// Indicates whether actions should be executed during any changes to the alarm
// state of the composite alarm. The default is TRUE.
ActionsEnabled *bool `json:"actionsEnabled,omitempty"`
// Actions will be suppressed if the suppressor alarm is in the ALARM state.
// ActionsSuppressor can be an AlarmName or an Amazon Resource Name (ARN) from
// an existing alarm.
ActionsSuppressor *string `json:"actionsSuppressor,omitempty"`
// The maximum time in seconds that the composite alarm waits after suppressor
// alarm goes out of the ALARM state. After this time, the composite alarm performs
// its actions.
// 
// ExtensionPeriod is required only when ActionsSuppressor is specified.
ActionsSuppressorExtensionPeriod *int64 `json:"actionsSuppressorExtensionPeriod,omitempty"`
// The maximum time in seconds that the composite alarm waits for the suppressor
// alarm to go into the ALARM state. After this time, the composite alarm performs
// its actions.
// 
// WaitPeriod is required only when ActionsSuppressor is specified.
ActionsSuppressorWaitPeriod *int64 `json:"actionsSuppressorWaitPeriod,omitempty"`
// The actions to execute when this alarm transitions to the ALARM state from
// any other state. Each action is specified as an Amazon Resource Name (ARN).
// 
// Valid Values: arn:aws:sns:region:account-id:sns-topic-name | arn:aws:ssm:region:account-id:opsitem:severity
AlarmActions []*string `json:"alarmActions,omitempty"`
// The description for the composite alarm.
AlarmDescription *string `json:"alarmDescription,omitempty"`
// The name for the composite alarm. This name must be unique within the Region.
// +kubebuilder:validation:Required
AlarmName *string `json:"alarmName"`
// An expression that specifies which other alarms are to be evaluated to determine
// this composite alarm's state. For each alarm that you reference, you designate
// a function that specifies whether that alarm needs to be in ALARM state,
// OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and
// NOT) to combine multiple functions in a single expression. You can use parenthesis
// to logically group the functions in your expression.
// 
// You can use either alarm names or ARNs to reference the other alarms that
// are to be evaluated.
// 
// Functions can include the following:
// 
//    * ALARM("alarm-name or alarm-ARN") is TRUE if the named alarm is in ALARM
//    state.
// 
//    * OK("alarm-name or alarm-ARN") is TRUE if the named alarm is in OK state.
// 
//    * INSUFFICIENT_DATA("alarm-name or alarm-ARN") is TRUE if the named alarm
//    is in INSUFFICIENT_DATA state.
// 
//    * TRUE always evaluates to TRUE.
// 
//    * FALSE always evaluates to FALSE.
// 
// TRUE and FALSE are useful for testing a complex AlarmRule structure, and
// for testing your alarm actions.
// 
// Alarm names specified in AlarmRule can be surrounded with double-quotes ("),
// but do not have to be.
// 
// The following are some examples of AlarmRule:
// 
//    * ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh) specifies
//    that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh
//    and DiskReadOpsTooHigh alarms are in ALARM state.
// 
//    * ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress) specifies
//    that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM
//    state and DeploymentInProgress is not in ALARM state. This example reduces
//    alarm noise during a known deployment window.
// 
//    * (ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)
//    goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is
//    in ALARM state, and if NetworkOutTooHigh is in OK state. This provides
//    another example of using a composite alarm to prevent noise. This rule
//    ensures that you are not notified with an alarm action on high CPU or
//    disk usage if a known network problem is also occurring.
// 
// The AlarmRule can specify as many as 100 "children" alarms. The AlarmRule
// expression can have as many as 500 elements. Elements are child alarms, TRUE
// or FALSE statements, and parentheses.
// +kubebuilder:validation:Required
AlarmRule *string `json:"alarmRule"`
// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA
// state from any other state. Each action is specified as an Amazon Resource
// Name (ARN).
// 
// Valid Values: arn:aws:sns:region:account-id:sns-topic-name
InsufficientDataActions []*string `json:"insufficientDataActions,omitempty"`
// The actions to execute when this alarm transitions to an OK state from any
// other state. Each action is specified as an Amazon Resource Name (ARN).
// 
// Valid Values: arn:aws:sns:region:account-id:sns-topic-name
OKActions []*string `json:"oKActions,omitempty"`
// A list of key-value pairs to associate with the composite alarm. You can
// associate as many as 50 tags with an alarm.
// 
// Tags can help you organize and categorize your resources. You can also use
// them to scope user permissions, by granting a user permission to access or
// change only resources with certain tag values.
Tags []*Tag `json:"tags,omitempty"`
}

// CompositeAlarmStatus defines the observed state of CompositeAlarm
type CompositeAlarmStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
}

// CompositeAlarm is the Schema for the CompositeAlarms API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type CompositeAlarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   CompositeAlarmSpec   `json:"spec,omitempty"`
	Status CompositeAlarmStatus `json:"status,omitempty"`
}

// CompositeAlarmList contains a list of CompositeAlarm
// +kubebuilder:object:root=true
type CompositeAlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []CompositeAlarm `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CompositeAlarm{}, &CompositeAlarmList{})
}
